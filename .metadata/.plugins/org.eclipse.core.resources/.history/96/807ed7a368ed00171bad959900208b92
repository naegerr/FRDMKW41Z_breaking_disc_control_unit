/*
 * Accel_Altitude_sensor.h
 *
 *  Created on: 30.12.2017
 *      Author: Robert NÃ¤ger
 */

#ifndef COMMON_ACCEL_ALTITUDE_SENSOR_H_
#define COMMON_ACCEL_ALTITUDE_SENSOR_H_

//#include "fsl_i2c.h"
//#include "fsl_gpio.h"
#include "pin_mux.h"			// added by NAR

/************************************************************************************
*************************************************************************************
* Public Declarations
*************************************************************************************
************************************************************************************/

/*! Register according to datasheet MMA8452 */
typedef enum accel_register_t
{
	accel_state 			= 0x00U,	// State register (read only)
	accel_whoami			= 0x0DU,	// Device ID register address(read only)
	accel_transient_cfg		= 0x1DU,	// transient acceleration detection (read/write)
	accel_hp_filter			= 0x0FU,	// high-pass filter register (read/write)
	accel_xyz_data_cfg 		= 0x0EU,	// Data config (read/write)
	accel_ctrl_reg1			= 0x2AU,	// Control-register 1 (read/write)
	accel_ctrl_reg2			= 0x2BU,	// Control-register 2 (read/write)
	accel_ctrl_reg3			= 0x2CU,	// Control-register 3 (read/write)
	accel_ctrl_reg4			= 0x2DU,	// Control-register 4 (read/write)
	accel_ctrl_reg5			= 0x2EU,	// Control-register 5 (read/write)
} accel_register;

/*! Register according to datasheet MPL3115 */
typedef enum altitude_register_t
{
	altitude_state 			= 0x00U,	// State register (read only)
	altitude_data_msb		= 0x01U,	// Register for Data output MSB (read only)
	altitude_data_csb		= 0x02U,	// Register for Data output CSB (read only)
	altitude_data_lsb		= 0x03U,	// Register for Data output LSB (read only)
	altitude_whoami			= 0x0CU,	// Device ID register address(read only)
	altitude_FIFO_setup		= 0x0FU,	// FIFO setup register (read only)
	altitude_int_source		= 0x12U,	// interrupt source register (read only)
	altitude_sensor_data	= 0x13U,	// Sensor data register (read only)
	altitude_ctrl_reg1		= 0x26U,	// Control-register 1 (read/write)
	altitude_ctrl_reg2		= 0x27U,	// Control-register 2 (read/write)
	altitude_ctrl_reg3		= 0x28U,	// Control-register 3 (read/write)
	altitude_ctrl_reg4		= 0x29U,	// Control-register 4 (read/write)
	altitude_ctrl_reg5		= 0x2AU		// Control-register 5 (read/write)
} altitude_register;


typedef struct altitude_value_t
{
	int16_t		altitudeInteger;		// Altitude in [m] / MSBit gives sign: 1 -> negative
	uint8_t		altitudeFraction;		// Altitude fractions in [m] only Bit 4-7 used!
										/* from datasheet MPL3115 attachement
										 * 0b1000 = 0.5 m
										 * 0b0100 = 0.25 m
										 * 0b0010 = 0.125 m
										 * 0b0001 = 0.0625 m
										 */
} altitude_value;


int16_t x, y, z;				// Accel values
altitude_value altitude;		// Altitude values
uint8_t readBuffAccel[7];		// Buffer Acceleration sensor
uint8_t readBuffAltitude[4];	// Buffer Altitude sensor
const uint8_t slave_address[] = {0x1CU, 0x60U,  0x1DU, 0x1EU, 0x1FU};

#endif /* COMMON_ACCEL_ALTITUDE_SENSOR_H_ */
