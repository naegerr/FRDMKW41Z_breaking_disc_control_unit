/*
 * PWM_Servo.c
 *
 *  Created on: 30.12.2017
 *      Author: Robert NÃ¤ger
 */

#include "fsl_tpm.h"
#include "PWM_Servo.h"
/*! PWM */
#define		SERVO_FREQUENCY		(50)
#define		SERVO_INIT_VALUE	(3)	// not used
#define 	SERVO_TPM_BASEADDR 	(TPM0)
#define 	SERVO_TPM_CHANNEL 	(3)

// Source clock for TPM driver
#define TPM_SOURCE_CLOCK 		CLOCK_GetFreq(kCLOCK_McgFllClk)

uint8_t 	pwmInstance;
uint8_t 	pwmChannel;
uint16_t	pwmValue;
uint16_t 	updatedDutycycle;

tpm_config_t tpmInfo;
tpm_chnl_pwm_signal_param_t	tpmParam;
tpm_pwm_level_select_t pwmLevel;

/*! *********************************************************************************
* \brief  InitServoPWM
*
* \remarks	Init for the PWM signal for the Servo. 50Hz Timer.
********************************************************************************** */
void InitServoPWM(void)
{
	 /* PWM Init */
	// Init von PWM
	CLOCK_SetTpmClock(1U);
	pwmLevel = kTPM_LowTrue;
	updatedDutycycle = 5;

	tpmParam.chnlNumber = (tpm_chnl_t) SERVO_TPM_CHANNEL;
	tpmParam.level= pwmLevel;
	tpmParam.dutyCyclePercent = updatedDutycycle;
	TPM_GetDefaultConfig(&tpmInfo);
	tpmInfo.prescale = kTPM_Prescale_Divide_128;
	tpmInfo.enableDebugMode = true;	// has to be set to true
	// Initialize TPM module
	TPM_Init(SERVO_TPM_BASEADDR, &tpmInfo);
	TPM_SetupPwm(SERVO_TPM_BASEADDR, &tpmParam, 1U,kTPM_EdgeAlignedPwm , SERVO_FREQUENCY, TPM_SOURCE_CLOCK);
	TPM_StartTimer(SERVO_TPM_BASEADDR, kTPM_SystemClock);
	TPM_UpdateChnlEdgeLevelSelect(SERVO_TPM_BASEADDR, SERVO_TPM_CHANNEL, kTPM_HighTrue);
}

/*! *********************************************************************************
* \brief  PWM_updateServo
* \remarks	The PWM of the Servo is updated and send to peripherie according to new bikespeed.
* In future, update should be made using the power value.
********************************************************************************** */
void PWM_updateServo(uint16_t bikeSpeed)
{
	//updatedDutycycle = 13U - bikeSpeed / 7U; // updatedDutycycle = bikeSpeed / 5U + 3U;
	//updatedDutycycle = 10U - bikeSpeed / 15U;	// adapted to mechanical prototype
	updatedDutycycle = (327U - 197U)/(111U - 0U)*bikeSpeed + 197U;
	updatedDutycycle = (310U - 70U)/(111U - 0U)*bikeSpeed + 70U;

/*	 for(uint16_t pwmvalue = 0; pwmvalue < 1000U; pwmvalue++)
	{
		TPM_updatePWM(SERVO_TPM_BASEADDR, (tpm_chnl_t)SERVO_TPM_CHANNEL, kTPM_EdgeAlignedPwm, pwmvalue);

	}
*/
	if(updatedDutycycle > 69U && updatedDutycycle < 311U) // Limits of Servo
	{
		//if(updatedDutycycle > 196 && updatedDutycycle < 328) // Limits of mechanical prototype
		{
			// Update with resolution
			TPM_updatePWM(SERVO_TPM_BASEADDR, (tpm_chnl_t)SERVO_TPM_CHANNEL, kTPM_EdgeAlignedPwm, updatedDutycycle);
		}
	}
}

/*! *********************************************************************************
* \brief  PWM_updatePWM
* \remarks	This function calculates the PWM dutycycle with a higher resolution as
* the given function TPM_UpdatePwmCutycycle from Freescale
* It is required to have a smoother braking effect of the mechanical prototype.
* The code is basically copied from the freescale library function TPM_Update PwmDutycycle
* but the cnv value calculation was adapted.
********************************************************************************** */

void TPM_updatePWM(TPM_Type *base,
                   tpm_chnl_t chnlNumber,
                   tpm_pwm_mode_t currentPwmMode,
                   uint16_t dutycycle)
{
	#if 1
    assert(chnlNumber < FSL_FEATURE_TPM_CHANNEL_COUNTn(base));
#if defined(FSL_FEATURE_TPM_HAS_COMBINE) && FSL_FEATURE_TPM_HAS_COMBINE
    if(currentPwmMode == kTPM_CombinedPwm)
    {
        assert(FSL_FEATURE_TPM_COMBINE_HAS_EFFECTn(base));
    }
#endif

    uint16_t cnv, mod;

    mod = base->MOD;
#if defined(FSL_FEATURE_TPM_HAS_COMBINE) && FSL_FEATURE_TPM_HAS_COMBINE
    if (currentPwmMode == kTPM_CombinedPwm)
    {
        uint16_t cnvFirstEdge;

        /* This check is added for combined mode as the channel number should be the pair number */
        if (chnlNumber >= (FSL_FEATURE_TPM_CHANNEL_COUNTn(base) / 2))
        {
            return;
        }

        cnv = (mod * dutycycle) / 3275U;
        cnv = dutycycle;
        cnvFirstEdge = base->CONTROLS[chnlNumber * 2].CnV;
        /* For 100% duty cycle */
        if (cnv >= mod)
        {
            cnv = mod + 1;
        }
        base->CONTROLS[(chnlNumber * 2) + 1].CnV = cnvFirstEdge + cnv;
    }
    else
    {
#endif
        cnv = (mod * dutycycle) / 3275U;
        cnv = dutycycle;
        /* For 100% duty cycle */
        if (cnv >= mod)
        {
            cnv = mod + 1;
        }
        base->CONTROLS[chnlNumber].CnV = cnv;
#if defined(FSL_FEATURE_TPM_HAS_COMBINE) && FSL_FEATURE_TPM_HAS_COMBINE
    }
#endif
#endif
}

