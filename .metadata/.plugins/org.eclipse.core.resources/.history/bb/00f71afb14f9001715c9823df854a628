/*
 * PWM_Servo.c
 *
 *  Created on: 30.12.2017
 *      Author: Robert NÃ¤ger
 */

#include "fsl_tpm.h"
#include "PWM_Servo.h"
/*! PWM */
#define		SERVO_FREQUENCY		(50)
#define		SERVO_INIT_VALUE	(3)	// not used
#define 	SERVO_TPM_BASEADDR 	(TPM0)
#define 	SERVO_TPM_CHANNEL 	(3)

// Source clock for TPM driver
#define TPM_SOURCE_CLOCK 		CLOCK_GetFreq(kCLOCK_McgFllClk)

uint8_t 	pwmInstance;
uint8_t 	pwmChannel;
uint16_t	pwmValue;
uint8_t 	updatedDutycycle;

tpm_config_t tpmInfo;
tpm_chnl_pwm_signal_param_t	tpmParam;
tpm_pwm_level_select_t pwmLevel;

/*! *********************************************************************************
* \brief  InitServoPWM
*
* \remarks	Init for the PWM signal for the Servo. 50Hz Timer.
********************************************************************************** */
void InitServoPWM(void)
{
	 /* PWM Init */
	// Init von PWM
	CLOCK_SetTpmClock(1U);
	pwmLevel = kTPM_LowTrue;
	updatedDutycycle = 5;

	tpmParam.chnlNumber = (tpm_chnl_t) SERVO_TPM_CHANNEL;
	tpmParam.level= pwmLevel;
	tpmParam.dutyCyclePercent = updatedDutycycle;
	TPM_GetDefaultConfig(&tpmInfo);
	tpmInfo.prescale = kTPM_Prescale_Divide_128;
	tpmInfo.enableDebugMode = true;	// has to be set to true
	// Initialize TPM module
	TPM_Init(SERVO_TPM_BASEADDR, &tpmInfo);
	TPM_SetupPwm(SERVO_TPM_BASEADDR, &tpmParam, 1U,kTPM_EdgeAlignedPwm , SERVO_FREQUENCY, TPM_SOURCE_CLOCK);
	TPM_StartTimer(SERVO_TPM_BASEADDR, kTPM_SystemClock);
	TPM_UpdateChnlEdgeLevelSelect(SERVO_TPM_BASEADDR, SERVO_TPM_CHANNEL, kTPM_HighTrue);
}

/*! *********************************************************************************
* \brief  PWM_updateServo
* \remarks	The PWM of the Servo is updated and send to peripherie according to new bikespeed.
* In future, update should be made using the power value.
********************************************************************************** */
void PWM_updateServo(uint16_t bikeSpeed)
{
	updatedDutycycle = bikeSpeed / 7U + 3U; // updatedDutycycle = bikeSpeed / 5U + 3U;
	updatedDutycycle = bikeSpeed / 13U + 4U;	// adapted to mechanical prototype
	if(updatedDutycycle > 2 && updatedDutycycle < 14) // Limits of Servo
	{
		if(updatedDutycycle > 4 && updatedDutycycle < 10) // Limits of mechanical prototype
		{
			TPM_UpdatePwmDutycycle(SERVO_TPM_BASEADDR, (tpm_chnl_t)SERVO_TPM_CHANNEL, kTPM_EdgeAlignedPwm, updatedDutycycle);
		}
	}
}


