/*!
 * This file is the interface file for the Bike simulator service.
 *
 * Author:		Robert NÃ¤ger
 * Date:		15. Nov. 2017
 */

#ifndef _BIKE_SIMULATOR_INTERFACE_H_
#define _BIKE_SIMULATOR_INTERFACE_H_

/************************************************************************************
*************************************************************************************
* Include
*************************************************************************************
************************************************************************************/

/************************************************************************************
*************************************************************************************
* Public constants & macros
*************************************************************************************
************************************************************************************/


/************************************************************************************
*************************************************************************************
* Public type definitions
*************************************************************************************
************************************************************************************/

/*! Bike simulator Client - Configuration */
typedef struct bscConfig_tag
{
	deviceId_t	 bServiceId;				/*!<Service Id */
    uint16_t     bService;                 /*!<Service Handle */
    double	     bBrakingPower;			 /*! Braking power */
    double		 bSpeed;				 /*! Bicycle speed */

} bscConfig_t;



//static bool_t CheckScanEvent(gapScannedDevice_t* pData);



// Server interfaces, might not be necessary
/*! Start and stop service functions */
/*
bleResult_t Bs_Start(bsConfig_t *bServiceConfig);
bleResult_t Bs_Stop(bsConfig_t *bServiceConfig);
*/
/*! Subscribe and unsubscribe functions */
/*
bleResult_t Bs_Subscribe(deviceId_t clientDeviceId);
bleResult_t Bs_Unsubscribe();
*/
/*! Functions for read, write, update characteristics */
/*
bleResult_t Bs_SendBrakingPower(uint16_t serviceHandle, uint16_t newBrakingValue);
bleResult_t Bs_ReceiveBrakingPower(uint16_t serviceHandle); // TODO: change Return data type
*/
#endif /* _BIKE_SIMULATOR_INTERFACE_H_ */
