/*!
 * This file is the c file for the Bike simulator service.
 *
 * Author:		Robert NÃ¤ger
 * Date:		15. Nov. 2017
 */

/************************************************************************************
*************************************************************************************
* Include
*************************************************************************************
************************************************************************************/
#include "FunctionLib.h"

#include "ble_general.h"
#include "gatt_db_app_interface.h"
#include "gatt_server_interface.h"
#include "gap_interface.h"
#include "bike_simulator_interface.h"

/************************************************************************************
*************************************************************************************
* Private constants & macros
*************************************************************************************
************************************************************************************/
/*! Bike simulator Service - Subscribed Client*/
//static deviceId_t mBs_SubscribedClientId;

/************************************************************************************
*************************************************************************************
* Private type definitions
*************************************************************************************
************************************************************************************/

/************************************************************************************
*************************************************************************************
* Public functions
*************************************************************************************
************************************************************************************/


static bool_t CheckScanEvent(gapScannedDevice_t* pData)
{
 uint8_t index = 0;
 uint8_t name[10];
 uint8_t nameLength;
 bool_t foundMatch = FALSE;

 while (index < pData->dataLength)
 {
        gapAdStructure_t adElement;

        adElement.length = pData->data[index];
        adElement.adType = (gapAdType_t)pData->data[index + 1];
        adElement.aData = &pData->data[index + 2];

        //  Search for Humidity Custom Service
        if ((adElement.adType == gAdIncomplete128bitServiceList_c) || (adElement.adType == gAdComplete128bitServiceList_c))
        {
            foundMatch = MatchDataInAdvElementList(&adElement, &uuid_service_bike_simulator, 16);
        }

        if ((adElement.adType == gAdShortenedLocalName_c) || (adElement.adType == gAdCompleteLocalName_c))
        {
            nameLength = MIN(adElement.length, 10);
            FLib_MemCpy(name, adElement.aData, nameLength);
        }

        // Move on to the next AD elemnt type
        index += adElement.length + sizeof(uint8_t);
 }

 if (foundMatch)
 {
        // UI
        //shell_write("\r\nFound device: \r\n");
        //shell_writeN((char*)name, nameLength-1);
        //SHELL_NEWLINE();
        //shell_writeHex(pData->aAddress, 6);
 }
 return foundMatch;
}



